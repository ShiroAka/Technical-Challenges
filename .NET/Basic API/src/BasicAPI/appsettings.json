{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  //To me this looks cleaner to organize all the API endpoints in one place, instead of putting each URL as a different key-value
  "Endpoints": {
    //Open API to test HTTP methods; check "https://restful-api.dev"
    "Devices": {
      "BaseURL": "https://api.restful-api.dev/objects"
    },
    //Open API that returns random users; check "https://randomuser.me"
    "RandomUsers": {
      "BaseURL": "https://randomuser.me/api"
    },
    //Open API used to test HTTP methods (POST and GET); check "https://webhook.link"
    "WebHook": {
      "NewId": "https://webhook.link/api/new", //Must create a new webhook ID to test POST & GET methods
      "GetObject": "https://webhook.link/inspect",
      "CreateObject": "https://webhook.link"
    }
  },
  "CustomWebHookApiHeader": {
    "Name": "Testheader",
    "Value": "6E3F37EF-2DBC-4062-B974-5812DCB0B2AC"
  },
  "AllowedHosts": "*",
  "ApiRequests": {
    "MaxTimeoutSeconds": 60,
    "MaxRetries": 3
  },

  "NLog": {
    "autoReload": true,
    "throwConfigExceptions": true,
    "internalLogLevel": "Off",
    "extensions": [
      { "assembly": "NLog.Web.AspNetCore" }
    ],
    "targets": {
      "async": true,
      "console": {
        "type": "ColoredConsole",
        "layout": {
          "type": "JsonLayout",
          "Attributes": [
            {
              "name": "date",
              "layout": "${date:format=yyyy-MM-ddTHH\\:mm\\:ss.fff}"
            },
            {
              "name": "level",
              "layout": "${uppercase:${level}}"
            },
            {
              "name": "message",
              "layout": "${event-properties:item=EventId_Id}|${logger}|${message}"
            },
            {
              "name": "exception",
              "layout": "${exception:format=tostring}"
            }
          ]
        }
      },
      "logfile": {
        "type": "File",
        "Attributes": [
          {
            "name": "date",
            "layout": "${date:format=yyyy-MM-ddTHH\\:mm\\:ss.fff}"
          },
          {
            "name": "level",
            "layout": "${uppercase:${level}}"
          },
          {
            "name": "message",
            "layout": "${event-properties:item=EventId_Id}|${logger}|${message}"
          },
          {
            "name": "exception",
            "layout": "${exception:format=tostring}"
          }
        ],
        "fileName": "./logs"
      }
    },
    "variables": {
      "loglevel":  "Info"
    },
    "rules": [
      //Skip non-critical Microsoft logs, so it prints only own logs
      {
        "logger": "Microsoft.*",
        "minLevel": "Warn"
      },
      {
        "logger": "Microsoft.Hosting.Lifetime*",
        "minLevel": "Info"
      },
      {
        "logger": "System.Net.Http.HttpClient.IConfigService.*",
        "minLevel": "Warning"
      },
      //All logs, including from Microsoft
      {
        "logger": "*",
        "minLevel": "${var:logLevel}",
        "writeTo": "logfile"
      }
    ]
  }
}
